CREATE TABLE LOGS (
    ID_LOG SERIAL PRIMARY KEY,
    NOME_TABELA VARCHAR(63) NOT NULL,
    USUARIO_DB VARCHAR(63) NOT NULL,
    ACAO_REALIZADA CHAR(1) NOT NULL,
    DADOS_ANTIGOS JSONB,
    DADOS_NOVOS JSONB,
    DATA_OCORRENCIA TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE FUNCTION fnLogs()
RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'INSERT') THEN
		INSERT INTO LOGS (NOME_TABELA, USUARIO_DB, ACAO_REALIZADA, DADOS_NOVOS)
		VALUES (TG_TABLE_NAME, CURRENT_USER, 'I', TO_JSONB(NEW));
		RETURN NEW;

	ELSIF(TG_OP = 'UPDATE') THEN
		INSERT INTO LOGS(NOME_TABELA, USUARIO_DB, ACAO_REALIZADA, DADOS_ANTIGOS, DADOS_NOVOS)
		VALUES (TG_TABLE_NAME, CURRENT_USER, 'U', TO_JSONB(OLD), TO_JSONB(NEW));
		RETURN NEW;

	ELSIF(TG_OP = 'DELETE') THEN
		INSERT INTO LOGS (NOME_TABELA, USUARIO_DB, ACAO_REALIZADA, DADOS_ANTIGOS, DADOS_NOVOS)
		VALUES (TG_TABLE_NAME, CURRENT_USER, 'D', TO_JSONB(OLD), TO_JSONB(NEW));
		RETURN OLD;
	END IF;

	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER TRG_LOGS_DEPARTAMENTO
AFTER INSERT OR UPDATE OR DELETE
ON DEPARTAMENTO
FOR EACH ROW
EXECUTE FUNCTION FNLOGS();

CREATE TRIGGER TRG_LOGS_MAQUINA
AFTER INSERT OR UPDATE OR DELETE
ON MAQUINA
FOR EACH ROW
EXECUTE FUNCTION FNLOGS();

CREATE TRIGGER TRG_LOGS_SOFTWARE
AFTER INSERT OR UPDATE OR DELETE
ON SOFTWARE
FOR EACH ROW
EXECUTE FUNCTION FNLOGS();

CREATE TRIGGER TRG_LOGS_PIP
AFTER INSERT OR UPDATE OR DELETE
ON PIP
FOR EACH ROW
EXECUTE FUNCTION FNLOGS();

CREATE TRIGGER TRG_LOGS_USU_MAQ_SOFT_PIP
AFTER INSERT OR UPDATE OR DELETE
ON USU_MAQ_SOFT_PIP
FOR EACH ROW
EXECUTE FUNCTION FNLOGS();

CREATE TRIGGER TRG_LOGS_USUARIO
AFTER INSERT OR UPDATE OR DELETE
ON USUARIO
FOR EACH ROW
EXECUTE FUNCTION FNLOGS();